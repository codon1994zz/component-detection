// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using QuickType;
//
//    var pipInspect = PipInspect.FromJson(jsonString);

namespace Microsoft.ComponentDetection.Detectors.Pip;

using System;
using System.Collections.Generic;

using System.Globalization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

public partial class PipInspect
{
    [JsonProperty("version")]
    [JsonConverter(typeof(ParseStringConverter))]
    public long Version { get; set; }

    [JsonProperty("pip_version")]
    public string PipVersion { get; set; }

    [JsonProperty("installed")]
    public Installed[] Installed { get; set; }

    [JsonProperty("environment")]
    public Environment Environment { get; set; }
}

public partial class Environment
{
    [JsonProperty("implementation_name")]
    public string ImplementationName { get; set; }

    [JsonProperty("implementation_version")]
    public string ImplementationVersion { get; set; }

    [JsonProperty("os_name")]
    public string OsName { get; set; }

    [JsonProperty("platform_machine")]
    public string PlatformMachine { get; set; }

    [JsonProperty("platform_release")]
    public string PlatformRelease { get; set; }

    [JsonProperty("platform_system")]
    public string PlatformSystem { get; set; }

    [JsonProperty("platform_version")]
    public string PlatformVersion { get; set; }

    [JsonProperty("python_full_version")]
    public string PythonFullVersion { get; set; }

    [JsonProperty("platform_python_implementation")]
    public string PlatformPythonImplementation { get; set; }

    [JsonProperty("python_version")]
    public string PythonVersion { get; set; }

    [JsonProperty("sys_platform")]
    public string SysPlatform { get; set; }
}

public partial class Installed
{
    [JsonProperty("metadata")]
    public Metadata Metadata { get; set; }

    [JsonProperty("metadata_location")]
    public string MetadataLocation { get; set; }

    [JsonProperty("installer", NullValueHandling = NullValueHandling.Ignore)]
    public string Installer { get; set; }

    [JsonProperty("requested", NullValueHandling = NullValueHandling.Ignore)]
    public bool? Requested { get; set; }

    [JsonProperty("direct_url", NullValueHandling = NullValueHandling.Ignore)]
    public DirectUrl DirectUrl { get; set; }
}

public partial class DirectUrl
{
    [JsonProperty("url")]
    public string Url { get; set; }

    [JsonProperty("dir_info")]
    public DirInfo DirInfo { get; set; }
}

public partial class DirInfo
{
    [JsonProperty("editable")]
    public bool Editable { get; set; }
}

public partial class Metadata
{
    [JsonProperty("metadata_version")]
    public string MetadataVersion { get; set; }

    [JsonProperty("name")]
    public string Name { get; set; }

    [JsonProperty("version")]
    public string Version { get; set; }

    [JsonProperty("summary")]
    public string Summary { get; set; }

    [JsonProperty("description_content_type", NullValueHandling = NullValueHandling.Ignore)]
    public string DescriptionContentType { get; set; }

    [JsonProperty("author_email")]
    public string AuthorEmail { get; set; }

    [JsonProperty("classifier")]
    public string[] Classifier { get; set; }

    [JsonProperty("requires_dist", NullValueHandling = NullValueHandling.Ignore)]
    public string[] RequiresDist { get; set; }

    [JsonProperty("requires_python")]
    public string RequiresPython { get; set; }

    [JsonProperty("project_url", NullValueHandling = NullValueHandling.Ignore)]
    public string[] ProjectUrl { get; set; }

    [JsonProperty("provides_extra", NullValueHandling = NullValueHandling.Ignore)]
    public string[] ProvidesExtra { get; set; }

    [JsonProperty("description")]
    public string Description { get; set; }

    [JsonProperty("platform", NullValueHandling = NullValueHandling.Ignore)]
    public string[] Platform { get; set; }

    [JsonProperty("home_page", NullValueHandling = NullValueHandling.Ignore)]
    public Uri HomePage { get; set; }

    [JsonProperty("author", NullValueHandling = NullValueHandling.Ignore)]
    public string Author { get; set; }

    [JsonProperty("license", NullValueHandling = NullValueHandling.Ignore)]
    public string License { get; set; }
}

public partial class PipInspect
{
    public static PipInspect FromJson(string json) => JsonConvert.DeserializeObject<PipInspect>(json, Microsoft.ComponentDetection.Detectors.Pip.Converter.Settings);
}

public static class Serialize
{
    public static string ToJson(this PipInspect self) => JsonConvert.SerializeObject(self, Microsoft.ComponentDetection.Detectors.Pip.Converter.Settings);
}

internal static class Converter
{
    public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
    {
        MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
        DateParseHandling = DateParseHandling.None,
        Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
    };
}

internal class ParseStringConverter : JsonConverter
{
    public override bool CanConvert(Type t) => t == typeof(long) || t == typeof(long?);

    public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
    {
        if (reader.TokenType == JsonToken.Null)
            return null;
        var value = serializer.Deserialize<string>(reader);
        long l;
        if (Int64.TryParse(value, out l))
        {
            return l;
        }
        throw new Exception("Cannot unmarshal type long");
    }

    public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
    {
        if (untypedValue == null)
        {
            serializer.Serialize(writer, null);
            return;
        }
        var value = (long)untypedValue;
        serializer.Serialize(writer, value.ToString());
        return;
    }

    public static readonly ParseStringConverter Singleton = new ParseStringConverter();
}
